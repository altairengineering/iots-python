openapi: 3.0.3
info:
  title: AnythingDB - API reference
  description: |
    This is the specification for the AnythingDB API, which allows to create and
    interact with Things following the
    [WoT specification](https://www.w3.org/TR/wot-thing-description/#thing),
    as well as other features like Models, Categories, or even running custom
    queries directly on the database.
    
    📖 [Check the documentation](https://help.altair.com/altair-iot-studio/topics/anythingdb/anythingdb_intro.htm)
    to know more about AnythingDB.
  version: 1.0.0
  x-api-gen:
    equivalent_paths:
      - source: /spaces/{space}/categories/{category-name}/things
        target: /spaces/{space}/things
servers:
  - url: 'https://api.swx.altairone.com'
    description: Altair® IoT Studio™
  - url: '{protocol}://{address}'
    description: Custom API address
    variables:
      protocol:
        description: HTTP protocol.
        default: https
        enum:
          - https
          - http
      address:
        description: The domain or IP of the Altair® IoT Studio™ API.
        default: api.swx.altairone.com
tags:
  - name: Categories
    description: Operations on Categories
  - name: Models
    description: Operations on Models
  - name: Model-Versions
    description: Operations on Model-Versions
  - name: Things
    description: Operations on Things
  - name: Thing Credentials
    description: Operations on Things Credentials
  - name: Actions
    description: Operations on Thing Actions
  - name: Events
    description: Operations on Thing Events
  - name: Properties
    description: Operations on Thing Properties
  - name: Properties History
    description: Operations on Thing Properties History
  - name: Query Cursors
    description: Operations on database queries
  - name: Categories MQTT-credentials
    description: Operations on MQTT credentials for Categories
  - name: Things MQTT-credentials
    description: Operations on MQTT credentials for Things
security:
  - AccessToken: []
  - OAuth2ClientCredentials: [ ]
  - OAuth2AuthorizationCode: [ ]
paths:
  /spaces/{space}/categories:
    post:
      x-method-name:
        default: create
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ category ]
        - OAuth2AuthorizationCode: [ category ]
      description: |
        Creates a new Category in the Space.

        > 🚧 **Limitations:** A Category cannot currently be renamed.
      tags:
        - Categories
      summary: Create a Category
      operationId: CreateCategory
      parameters:
        - $ref: '#/components/parameters/space'
      requestBody:
        description: Create a new Category in the platform
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      x-pagination:
        $ref: '#/components/x-pagination/CursorPagination'
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ category ]
        - OAuth2AuthorizationCode: [ category ]
      description: |
        Returns the list of Categories.

        > 🚧 **Limitations:** A maximum of 1000 Categories will be returned per
        > page (50 by default).
      tags:
        - Categories
      summary: List categories
      operationId: ListCategories
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryList'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}:
    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ category ]
        - OAuth2AuthorizationCode: [ category ]
      description: |
        Returns a Category.
      tags:
        - Categories
      summary: Get a Category
      operationId: GetCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    put:
      x-method-name:
        default: update
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ category ]
        - OAuth2AuthorizationCode: [ category ]
      description: |
        Updates a Category.

        > 🚧 **Limitations:** A Category cannot currently be renamed.
      tags:
        - Categories
      summary: Update a Category
      operationId: UpdateCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
      requestBody:
        description: Update an existent Category by name
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryUpdate'
            example:
              name: ElectronicBoards
              description: My electronic boards category
              model:
                name: ArduinoModel
                version: 2
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
              example:
                name: ElectronicBoards
                description: My electronic boards category
                model:
                  name: ArduinoModel
                  version: 2
                created: "2021-11-17T03:15:40Z"
                modified: "2021-11-19T20:25:14Z"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ category ]
        - OAuth2AuthorizationCode: [ category ]
      description: |
        Deletes a Category.

        > 📘 **Information:** The Things inside the Category will not be removed.
        > They will simply not belong to the eliminated Category anymore.
      tags:
        - Categories
      summary: Delete a Category
      operationId: DeleteCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
      responses:
        204:
          description: The resource was deleted successfully.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/models:
    post:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ model ]
        - OAuth2AuthorizationCode: [ model ]
      description: |
        Creates a new Model inside a Space.

        > 🚧 **Limitations:** A Model cannot be renamed.
      tags:
        - Models
      summary: Create a Model
      operationId: CreateModel
      parameters:
        - $ref: '#/components/parameters/space'
      requestBody:
        description: Create a new Model in the platform
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelCreate'
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ model ]
        - OAuth2AuthorizationCode: [ model ]
      description: |
        Returns the list of Models.

        > 🚧 **Limitations:** A maximum of 1000 Models will be returned per
        > page (50 by default).
      tags:
        - Models
      summary: List Models
      operationId: ListModels
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelList'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/models/{model-name}:
    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ model ]
        - OAuth2AuthorizationCode: [ model ]
      description: |
        Returns a Model.
      tags:
        - Models
      summary: Get a Model
      operationId: GetModel
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/model-name'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    put:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ model ]
        - OAuth2AuthorizationCode: [ model ]
      description: |
        Updates a Model.

        > 🚧 **Limitations:** A Model cannot be renamed.
      tags:
        - Models
      summary: Update a Model
      operationId: UpdateModel
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/model-name'
      requestBody:
        description: Update an existent Model by name
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelUpdate'
            example:
              name: RaspberryPiModel
              description: My Raspberry Pi 4 Model
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
              example:
                name: RaspberryPiModel
                description: My Raspberry Pi 4 Model
                created: "2021-11-17T10:08:31Z"
                modified: "2021-11-17T11:45:07Z"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ model ]
        - OAuth2AuthorizationCode: [ model ]
      description: |
        Deletes a Model and all its Versions.

        > 🚧 **Limitations:** If a Model is being used by a Category or a Thing,
        > the Model cannot be deleted until all the associations with the Model are removed.
      tags:
        - Models
      summary: Delete a Model
      operationId: DeleteModel
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/model-name'
      responses:
        204:
          description: The resource was deleted successfully.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Forbidden'
              examples:
                insufficient_permissions:
                  summary: Insufficient permissions
                  value:
                    error:
                      status: 403
                      message: Unauthorized
                categories_associated:
                  summary: Model is being used by Categories
                  value:
                    error:
                      status: 403
                      message: model cannot be deleted because there are categories using it
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/models/{model-name}/versions:
    post:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ model ]
        - OAuth2AuthorizationCode: [ model ]
      description: |
        Creates a new Version of a Model inside a Space.

        > 📘 **Information:** The Version identifier will be a number that
        > starts with 1 and is automatically incremented for every new Model-Version.

        > 🚧 **Limitations:** Once a Version is created, it cannot be updated or deleted.
      tags:
        - Model-Versions
      summary: Create a Model Version
      operationId: CreateVersion
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/model-name'
      requestBody:
        description: Create a new Model-Version in the platform
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModelVersionCreate'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersion'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ model ]
        - OAuth2AuthorizationCode: [ model ]
      description: |
        Returns the list of Versions of a Model.

        > 🚧 **Limitations:** A maximum of 1000 Model-Versions will be returned
        > per page (50 by default).
      tags:
        - Model-Versions
      summary: List Versions of a Model
      operationId: ListVersions
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/model-name'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersionList'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/models/{model-name}/versions/{version-num}:
    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ model ]
        - OAuth2AuthorizationCode: [ model ]
      description: |
        Returns a Model-Version.
      tags:
        - Model-Versions
      summary: Get a Model Version
      operationId: GetVersion
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/model-name'
        - $ref: '#/components/parameters/version-num'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelVersion'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/things:
    post:
      x-method-name:
        default: create
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      description: |
        Creates a new Thing inside a Space according to the
        [WoT specification](https://www.w3.org/TR/wot-thing-description/#thing).
      tags:
        - Things
      summary: Add a Thing Description
      operationId: CreateThing
      parameters:
        - $ref: '#/components/parameters/space'
      requestBody:
        description: Create a new Thing Description in the platform
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThingCreate'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      x-pagination:
        $ref: '#/components/x-pagination/CursorPagination'
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      description: |
        Returns the list of Things.

        Filters can be applied to return only the Things that match some criteria.

        > 🚧 **Limitations:** A maximum of 1000 Things will be returned
        > per page (50 by default).
      tags:
        - Things
      summary: List Thing Descriptions
      operationId: ListThings
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/title'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/thing-ids'
        - $ref: '#/components/parameters/category'
        - $ref: '#/components/parameters/in_category'
        - $ref: '#/components/parameters/sort_things'
        - $ref: '#/components/parameters/properties'
        - $ref: '#/components/parameters/links-rel'
        - $ref: '#/components/parameters/links-href'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingList'
          links:
            pagingNextPage:
              operationId: listThings
              parameters:
                next_cursor: '$response.body#/paging/next_cursor'
            pagingPreviousPage:
              operationId: listThings
              parameters:
                previous_cursor: '$response.body#/paging/previous_cursor'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Things
      summary: Delete Things
      description: |
        Deletes all the existing information (Things and history) from all the
        Things matching the given filters.

        > 📘 **Information:** To prevent accidental deletions, the operation
        > will fail if no filters are provided.

        > ⚠️ **Warning:** This operation can remove lots of Things in one go and
        > without asking for confirmation, so make sure you know what you are doing!

      operationId: DeleteThings
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/thing-ids'
        - $ref: '#/components/parameters/category'
        - $ref: '#/components/parameters/properties'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsDeleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/things/{thing-id}:
    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      description: |
        Returns the Thing with the given ID.
      tags:
        - Things
      summary: Get Thing Description
      operationId: GetThing
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    put:
      x-method-name:
        default: update
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      description: |
        Updates the Thing with the given ID.
      tags:
        - Things
      summary: Update Thing Description
      operationId: UpdateThing
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
      requestBody:
        description: Update an existent Thing Description by ID
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThingUpdate'
            example:
              uid: '01FPSXTMN4CEGX09HF5RQ4RMY6'
              title: Temperature Sensor
              description: My update temperature sensor
              categories: ["category1", "category2"]
              status:
                cpu: 5.7
              properties:
                cpu:
                  title: "Temperature"
                  description: "Temperature in degrees Celsius"
                  type: "number"
                  unit: "ºC"
                  readOnly: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Thing'
              example:
                uid: 01FPSXTMN4CEGX09HF5RQ4RMY6
                id: 'https://api.swx.altairone.com/spaces/space01/things/01FPSXTMN4CEGX09HF5RQ4RMY6'
                title: Temperature Sensor
                description: My update temperature sensor
                categories: ["category1", "category2"]
                model: null
                status:
                  cpu: 5.7
                properties:
                  cpu:
                    title: "Temperature"
                    description: "Temperature in degrees Celsius"
                    type: "number"
                    unit: "ºC"
                    readOnly: true
                created: "2021-12-13T09:38:11Z"
                modified: "2021-12-13T16:57:09Z"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      description: |
        Deletes the Thing with the given ID and all its related information
        (Properties history, graph relationships...).
      tags:
        - Things
      summary: Delete Thing
      operationId: DeleteThing
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
      responses:
        204:
          description: The resource was deleted successfully.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}/things:
    post:
      x-method-name:
        default: create
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      description: |
        Creates a new Thing inside a Space according to the
        [WoT specification](https://www.w3.org/TR/wot-thing-description/#thing).
        The specified Category will be assigned to the new Thing.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      tags:
        - Things
      summary: Add a Thing Description into a Category
      operationId: CreateThingFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
      requestBody:
        description:
          Create a new Thing Description in the platform.
          The `categories` attribute cannot be used in the request body.
          The Thing will be added only to the Category used in the URL.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThingCategoryCreate'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingCategory'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/Conflict'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      x-pagination:
        $ref: '#/components/x-pagination/CursorPagination'
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      description: |
        Returns the list of Things with the given Category.

        Filters can be applied to return only the Things that match some criteria.

        > 🚧 **Limitations:** A maximum of 1000 Things will be returned
        > per page (50 by default).

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      tags:
        - Things
      summary: List Thing Descriptions from a Category
      operationId: ListThingsFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/title'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/model'
        - $ref: '#/components/parameters/version'
        - $ref: '#/components/parameters/thing-ids'
        - $ref: '#/components/parameters/sort_things'
        - $ref: '#/components/parameters/properties'
        - $ref: '#/components/parameters/links-rel'
        - $ref: '#/components/parameters/links-href'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingCategoryList'
          links:
            pagingNextPage:
              operationId: listThings
              parameters:
                next_cursor: '$response.body#/paging/next_cursor'
            pagingPreviousPage:
              operationId: listThings
              parameters:
                previous_cursor: '$response.body#/paging/previous_cursor'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Things
      summary: Delete Things from a Category
      description: |
        Deletes all the existing information (Things and history) from all the
        Things with the specified Category that match the given filters.

        > 📘 **Information:** To prevent accidental deletions, the operation
        > will fail if no filters are provided.

        > ⚠️ **Warning:** This operation can remove lots of Things in one go and
        > without asking for confirmation, so make sure you know what you are doing!

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.

      operationId: DeleteThingsFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/thing-ids'
        - $ref: '#/components/parameters/properties'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingsDeleted'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}/things/{thing-id}:
    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      description: |
        Returns the Thing with the given ID and Category.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      tags:
        - Things
      summary: Get Thing Description from a Category
      operationId: GetThingFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingCategory'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    put:
      x-method-name:
        default: update
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      description: |
        Updates the Thing with the given ID and Category.

        > 📘 **Information:** The Categories of the Thing will not be changed.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      tags:
        - Things
      summary: Update Thing Description in a Category
      operationId: UpdateThingFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
      requestBody:
        description:
          Update an existent Thing Description by ID.
          The `categories` attribute cannot be used in the request body.
          Categories associations will not be changed.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThingCategoryUpdate'
            example:
              uid: '01FPSXTMN4CEGX09HF5RQ4RMY6'
              title: Temperature Sensor
              description: My update temperature sensor
              status:
                cpu: 5.7
              properties:
                cpu:
                  title: "Temperature"
                  description: "Temperature in degrees Celsius"
                  type: "number"
                  unit: "ºC"
                  readOnly: true
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingCategory'
              example:
                uid: 01FPSXTMN4CEGX09HF5RQ4RMY6
                id: 'https://api.swx.altairone.com/spaces/space01/categories/category1/things/01FPSXTMN4CEGX09HF5RQ4RMY6'
                title: Temperature Sensor
                description: My update temperature sensor
                model: null
                status:
                  cpu: 5.7
                properties:
                  cpu:
                    title: "Temperature"
                    description: "Temperature in degrees Celsius"
                    type: "number"
                    unit: "ºC"
                    readOnly: true
                created: "2021-12-13T09:38:11Z"
                modified: "2021-12-13T16:57:09Z"
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      description: |
        Deletes the Thing with the given ID and all its related information
        (Properties history, graph relationships...).

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      tags:
        - Things
      summary: Delete Thing
      operationId: DeleteThingFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
      responses:
        204:
          description: The resource was deleted successfully.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/things/{thing-id}/reset-secret:
    post:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Thing Credentials
      summary: Reset the secret of the Thing's OAuth2 client
      description: |
        Resets the secret of the Thing's OAuth2 client. The client will be
        created if it does not exist yet.
      operationId: ThingResetSecret
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingOAuth2Credentials'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}/things/{thing-id}/reset-secret:
    post:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Thing Credentials
      summary: Reset the secret of the Thing's OAuth2 client
      description: |
        Resets the secret of the Thing's OAuth2 client in the scope of a
        Category the Thing belongs to. The client will be created if it does
        not exist yet.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: CategoryThingResetSecret
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThingOAuth2Credentials'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/things/{thing-id}/actions/{action-name}:
    post:
      x-method-name:
        default: create
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Actions
      summary: Create Thing Action
      description: |
        Creates a new Action resource for the given Thing's Action.
      operationId: CreateAction
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/action-name'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionCreateRequest'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      x-pagination:
        $ref: '#/components/x-pagination/CursorPagination'
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Actions
      summary: List Thing Actions by Action name
      description: |
        Returns the list of Action resources of the given Thing's Action.

        > 🚧 **Limitations:** A maximum of 1000 Action resources will be returned
        > per page (50 by default).
      operationId: ListActionsByName
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/action-name'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionListResponse'
              example:
                data:
                  - delay:
                      input:
                        delay: 5
                      status: pending
                      timeRequested: '2022-06-02 15:37:46+0000'
                      href: "/spaces/altair/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR"
                  - delay:
                      input:
                        delay: 7
                      status: pending
                      timeRequested: '2022-06-02 15:39:54+0000'
                      href: "/spaces/altair/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCB9FMD0Q3QR0YV4TWY4S3E"
                paging:
                  next_cursor: ''
                  previous_cursor: ''
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/things/{thing-id}/actions:
    get:
      x-pagination:
        $ref: '#/components/x-pagination/CursorPagination'
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Actions
      summary: List Thing Actions
      description: |
        Returns the list of Action resources of the given Thing.

        > 🚧 **Limitations:** A maximum of 1000 Action resources will be returned
        > per page (50 by default).
      operationId: ListActions
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionListResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/things/{thing-id}/actions/{action-name}/{action-id}:
    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Actions
      summary: Get Thing Action
      description: |
        Returns a Thing Action resource.
      operationId: GetAction
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/action-name'
        - $ref: '#/components/parameters/action-id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    put:
      x-method-name:
        default: update
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Actions
      summary: Update Thing Action
      description: |
        Updates a Thing Action resource.
      operationId: UpdateAction
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/action-name'
        - $ref: '#/components/parameters/action-id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionUpdateRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResponse'
              example:
                delay:
                  input:
                    delay: 5
                  status: completed
                  timeRequested: "2022-06-02 15:37:46+0000"
                  timeCompleted: "2022-06-02 15:39:25+0000"
                  href: /spaces/altair/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Actions
      summary: Delete Thing Action
      description: |
        Deletes a Thing Action resource.
      operationId: DeleteAction
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/action-name'
        - $ref: '#/components/parameters/action-id'
      responses:
        204:
          description: The resource was deleted successfully.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}/things/{thing-id}/actions/{action-name}:
    post:
      x-method-name:
        default: create
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Actions
      summary: Create Thing Action from a Category
      description: |
        Creates a new Action resource for the given Thing's Action.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: CreateActionFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/action-name'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionCreateRequest'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResponse'
              example:
                delay:
                  input:
                    delay: 5
                  status: pending
                  timeRequested: "2022-06-02 15:37:46+0000"
                  href: /spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      x-pagination:
        $ref: '#/components/x-pagination/CursorPagination'
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Actions
      summary: List Thing Actions by Action name from a Category
      description: |
        Returns the list of Action resources of the given Thing's Action.

        > 🚧 **Limitations:** A maximum of 1000 Action resources will be returned
        > per page (50 by default).

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: ListActionsByNameFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/action-name'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionListResponse'
              example:
                data:
                  - delay:
                      input:
                        delay: 5
                      status: pending
                      timeRequested: '2022-06-02 15:37:46+0000'
                      href: "/spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR"
                  - delay:
                      input:
                        delay: 7
                      status: pending
                      timeRequested: '2022-06-02 15:39:54+0000'
                      href: "/spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCB9FMD0Q3QR0YV4TWY4S3E"
                paging:
                  next_cursor: ''
                  previous_cursor: ''

        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}/things/{thing-id}/actions:
    get:
      x-pagination:
        $ref: '#/components/x-pagination/CursorPagination'
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Actions
      summary: List Thing Actions from a Category
      description: |
        Returns the list of Action resources of the given Thing.

        > 🚧 **Limitations:** A maximum of 1000 Action resources will be returned
        > per page (50 by default).

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: ListActionsFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionListResponse'
              example:
                data:
                  - delay:
                      input:
                        delay: 5
                      status: pending
                      timeRequested: '2022-06-02 15:37:46+0000'
                      href: "/spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR"
                  - delay:
                      input:
                        delay: 7
                      status: pending
                      timeRequested: '2022-06-02 15:39:54+0000'
                      href: "/spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCB9FMD0Q3QR0YV4TWY4S3E"
                  - reboot:
                      status: pending
                      timeRequested: '2022-06-02 15:56:12+0000'
                      href: "/spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCCZYATJW1Z3D4T4BA4S2QH"
                paging:
                  next_cursor: ''
                  previous_cursor: ''
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}/things/{thing-id}/actions/{action-name}/{action-id}:
    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Actions
      summary: Get Thing Action from a Category
      description: |
        Returns a Thing Action resource.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: GetActionFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/action-name'
        - $ref: '#/components/parameters/action-id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResponse'
              example:
                delay:
                  input:
                    delay: 5
                  status: pending
                  timeRequested: "2022-06-02 15:37:46+0000"
                  href: /spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    put:
      x-method-name:
        default: update
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Actions
      summary: Update Thing Action from a Category
      description: |
        Updates a Thing Action resource.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: UpdateActionFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/action-name'
        - $ref: '#/components/parameters/action-id'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionUpdateRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionResponse'
              example:
                delay:
                  input:
                    delay: 5
                  status: completed
                  timeRequested: "2022-06-02 15:37:46+0000"
                  timeCompleted: "2022-06-02 15:39:25+0000"
                  href: /spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Actions
      summary: Delete Thing Action from a Category
      description: |
        Deletes a Thing Action resource.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: DeleteActionCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/action-name'
        - $ref: '#/components/parameters/action-id'
      responses:
        204:
          description: The resource was deleted successfully.
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/things/{thing-id}/events/{event-name}:
    post:
      x-method-name:
        default: create
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Events
      summary: Create Thing Event
      description: |
        Creates a new Event resource for the given Thing's Event.
      operationId: CreateEvent
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/event-name'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateRequest'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      x-pagination:
        $ref: '#/components/x-pagination/CursorPagination'
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Events
      summary: List Thing Events by Event name
      description: |
        Returns the list of Event resources of the given Thing's Event.

        > 🚧 **Limitations:** A maximum of 1000 Event resources will be returned
        > per page (50 by default).
      operationId: ListEventsByName
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/event-name'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResponse'
              example:
                data:
                  - highCPU:
                      data: 61
                      timestamp: "2020-04-02 15:22:37+0000"
                      href: /spaces/altair/things/01FPSXTMN4CEGX09HF5RQ4RMY6/events/highCPU/01EDCEZDTJX50SQTCJST5EW5NX
                  - highCPU:
                      data: 85
                      timestamp: "2020-04-02 15:26:42+0000"
                      href: /spaces/altair/things/01FPSXTMN4CEGX09HF5RQ4RMY6/events/highCPU/01EDCGYKV4YQ1CY3QHHSX8J843
                paging:
                  next_cursor: ''
                  previous_cursor: ''
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/things/{thing-id}/events:
    get:
      x-pagination:
        $ref: '#/components/x-pagination/CursorPagination'
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Events
      summary: List Thing Events
      description: |
        Returns the list of Event resources of the given Thing.

        > 🚧 **Limitations:** A maximum of 1000 Event resources will be returned
        > per page (50 by default).
      operationId: ListEvents
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/things/{thing-id}/events/{event-name}/{event-id}:
    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Events
      summary: Get Thing Event
      description: |
        Returns a Thing Event resource.
      operationId: GetEvent
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/event-name'
        - $ref: '#/components/parameters/event-id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      security:
        - AccessToken: [ ]
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Events
      summary: Delete Thing Event
      description: |
        Deletes a Thing Event resource.
      operationId: DeleteEvent
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/event-name'
        - $ref: '#/components/parameters/event-id'
      responses:
        204:
          description: The resource was deleted successfully.
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}/things/{thing-id}/events/{event-name}:
    post:
      x-method-name:
        default: create
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Events
      summary: Create Thing Event from a Category
      description: |
        Creates a new Event resource for the given Thing's Event.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: CreateEventFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/event-name'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCreateRequest'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
              example:
                highCPU:
                  data: 61
                  timestamp: "2020-04-02 15:22:37+0000"
                  href: /spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/events/highCPU/01EDCEZDTJX50SQTCJST5EW5NX
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      x-pagination:
        $ref: '#/components/x-pagination/CursorPagination'
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Events
      summary: List Thing Events by Event name from a Category
      description: |
        Returns the list of Event resources of the given Thing's Event.

        > 🚧 **Limitations:** A maximum of 1000 Event resources will be returned
        > per page (50 by default).

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: ListEventsByNameFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/event-name'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResponse'
              example:
                data:
                  - highCPU:
                      data: 61
                      timestamp: "2020-04-02 15:22:37+0000"
                      href: /spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/events/highCPU/01EDCEZDTJX50SQTCJST5EW5NX
                  - highCPU:
                      data: 85
                      timestamp: "2020-04-02 15:26:42+0000"
                      href: /spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/events/highCPU/01EDCGYKV4YQ1CY3QHHSX8J843
                paging:
                  next_cursor: ''
                  previous_cursor: ''
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}/things/{thing-id}/events:
    get:
      x-pagination:
        $ref: '#/components/x-pagination/CursorPagination'
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Events
      summary: List Thing Events from a Category
      description: |
        Returns the list of Event resources of the given Thing.

        > 🚧 **Limitations:** A maximum of 1000 Event resources will be returned
        > per page (50 by default).

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: ListEventsFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventListResponse'
              example:
                data:
                  - highCPU:
                      data: 61
                      timestamp: "2020-04-02 15:22:37+0000"
                      href: /spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/events/highCPU/01EDCEZDTJX50SQTCJST5EW5NX
                  - highCPU:
                      data: 85
                      timestamp: "2020-04-02 15:26:42+0000"
                      href: /spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/events/highCPU/01EDCGYKV4YQ1CY3QHHSX8J843
                  - lowDiskSpace:
                      data: 95
                      timestamp: "2020-04-03 07:12:55+0000"
                      href: /spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/events/lowDiskSpace/01GPX7BR5X3YT5Y65ZMT24YT1N
                paging:
                  next_cursor: ''
                  previous_cursor: ''
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}/things/{thing-id}/events/{event-name}/{event-id}:
    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Events
      summary: Get Thing Event from a Category
      description: |
        Returns a Thing Event resource.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: GetEventFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/event-name'
        - $ref: '#/components/parameters/event-id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
              example:
                highCPU:
                  data: 61
                  timestamp: "2020-04-02 15:22:37+0000"
                  href: /spaces/altair/categories/ElectronicBoards/things/01FPSXTMN4CEGX09HF5RQ4RMY6/events/highCPU/01EDCEZDTJX50SQTCJST5EW5NX
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Events
      summary: Delete Thing Event from a Category
      description: |
        Deletes a Thing Event resource.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: DeleteEventCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/event-name'
        - $ref: '#/components/parameters/event-id'
      responses:
        204:
          description: The resource was deleted successfully.
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/things/{thing-id}/properties:
    put:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties
      summary: Update Thing Property values
      description: |
        Updates the values of one or more Properties of a Thing.
      operationId: UpdateProperties
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/update-history'
      x-method-name:
        default: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Properties'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Properties'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties
      summary: List Thing Properties
      description: |
        Returns all the Property values of a Thing.
      operationId: ListProperties
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Properties'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/things/{thing-id}/properties/{property}:
    put:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties
      summary: Update Thing Property value
      description: |
        Updates the value of a Thing Property.
      operationId: UpdateProperty
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/property'
        - $ref: '#/components/parameters/update-history'
      x-method-name:
        default: update
      x-input-parameters:
        parameters:
          - name: value
            description: The new value of the Property.
        payload: '{"{{ property }}": {{ value }}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties
      summary: Get Thing Property value
      description: |
        Returns the value of a Thing Property.
      operationId: GetProperty
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/property'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}/things/{thing-id}/properties:
    put:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties
      summary: Update Thing Property values from a Category
      description: |
        Updates the values of one or more Properties of a Thing.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: UpdatePropertiesFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/update-history'
      x-method-name:
        default: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Properties'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Properties'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties
      summary: List Thing Properties from a Category
      description: |
        Returns all the Property values of a Thing.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: ListPropertiesFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Properties'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}/things/{thing-id}/properties/{property}:
    put:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties
      summary: Update Thing Property value from a Category
      description: |
        Updates the value of a Thing Property.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: UpdatePropertyFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/property'
        - $ref: '#/components/parameters/update-history'
      x-method-name:
        default: update
      x-input-parameters:
        parameters:
          - name: value
        payload: '{"{{ property }}": {{ value }}}'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties
      summary: Get Thing Property from a Category
      description: |
        Returns the value of a Thing Property.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: GetPropertyFromCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/property'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/things/{thing-id}/properties-history:
    post:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties History
      summary: Create historical values for any Thing Property
      description: |
        Adds historical values for one or more Properties of a Thing.
      operationId: CreatePropertiesHistoryValues
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PropertyHistoryValue'
                - $ref: '#/components/schemas/PropertyHistoryValues'
            examples:
              single_timestamp:
                summary: Single timestamp
                value:
                  at: "2022-08-22T13:09:00Z"
                  properties:
                    memory: 69
              multi_timestamp:
                summary: Multiple timestamps
                value:
                  - at: "2022-08-22T13:10:00Z"
                    properties:
                      cpu: 43
                      memory: 27
                      disk: 19
                  - at: "2022-08-22T13:09:00Z"
                    properties:
                      cpu: 87
                      memory: 69
                  - at: "2022-08-22T13:08:30Z"
                    properties:
                      disk: 17
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyHistoryValues'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/PropertyValueAlreadyExists'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties History
      summary: List historical values of any Thing Property
      description: |
        Returns the list of historical Properties values of a Thing.

        > 🚧 **Limitations:** A maximum of 1000 values will be returned
        > per page (50 by default).
      operationId: ListPropertiesHistoryValues
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/at'
        - $ref: '#/components/parameters/group_property_history'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyHistoryValueList'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties History
      summary: Delete historical values of any Thing Property
      description: |
        Deletes historical Properties values of a Thing.

        > 📘 **Information:** To prevent accidental deletions, the operation
        > will fail if no filters are provided.

        > ⚠️ **Warning:** This operation can remove lots of information in one go and
        > without asking for confirmation, so make sure you know what you are doing!
      operationId: DeletePropertiesHistoryValues
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/at_delete'
        - $ref: '#/components/parameters/property-names'
      responses:
        204:
          description: Deleted
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/things/{thing-id}/properties-history/{property}:
    post:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties History
      summary: Create historical values for a Thing Property
      description: |
        Adds one or more historical values for the given Thing Property.
      operationId: CreatePropertyHistoryValues
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/property'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PropertyHistoryValue'
                - $ref: '#/components/schemas/PropertyHistoryValues'
            examples:
              single_timestamp:
                summary: Single timestamp
                value:
                  at: "2022-08-22T13:09:00Z"
                  properties:
                    memory: 69
              multi_timestamp:
                summary: Multiple timestamps
                value:
                  - at: "2022-08-22T13:10:00Z"
                    properties:
                      memory: 27
                  - at: "2022-08-22T13:09:00Z"
                    properties:
                      memory: 69
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyHistoryValues'
              example:
                - at: "2022-08-22T13:09:00Z"
                  properties:
                    memory: 69
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/PropertyValueAlreadyExists'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties History
      summary: List historical values of a Thing Property
      description: |
        Returns the list of historical values of the given Thing Property.

        > 🚧 **Limitations:** A maximum of 1000 values will be returned
        > per page (50 by default).
      operationId: ListPropertyHistoryValues
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/property'
        - $ref: '#/components/parameters/at'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyHistoryValueList'
              example:
                paging:
                  next_cursor: ''
                  previous_cursor: ''
                data:
                  - at: "2022-08-22T13:10:00Z"
                    properties:
                      memory: 27
                  - at: "2022-08-22T13:09:00Z"
                    properties:
                      memory: 69
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties History
      summary: Delete historical values of Thing Property
      description: |
        Deletes historical values of a Thing Property.

        > 📘 **Information:** To prevent accidental deletions, the operation
        > will fail if no filters are provided.

        > ⚠️ **Warning:** This operation can remove lots of information in one go and
        > without asking for confirmation, so make sure you know what you are doing!
      operationId: DeletePropertyHistoryValues
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/property'
        - $ref: '#/components/parameters/at_delete'
      responses:
        204:
          description: Deleted
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}/things/{thing-id}/properties-history:
    post:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties History
      summary: Create historical values for any Thing Property from a Category
      description: |
        Adds historical values for one or more Properties of a Thing.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: CreateCategoryPropertiesHistoryValues
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PropertyHistoryValue'
                - $ref: '#/components/schemas/PropertyHistoryValues'
            examples:
              single_timestamp:
                summary: Single timestamp
                value:
                  at: "2022-08-22T13:09:00Z"
                  properties:
                    memory: 69
              multi_timestamp:
                summary: Multiple timestamps
                value:
                  - at: "2022-08-22T13:10:00Z"
                    properties:
                      cpu: 43
                      memory: 27
                      disk: 19
                  - at: "2022-08-22T13:09:00Z"
                    properties:
                      cpu: 87
                      memory: 69
                  - at: "2022-08-22T13:08:30Z"
                    properties:
                      disk: 17
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyHistoryValues'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/PropertyValueAlreadyExists'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties History
      summary: List historical values of any Thing Property from a Category
      description: |
        Returns the list of historical Properties values of a Thing.

        > 🚧 **Limitations:** A maximum of 1000 values will be returned
        > per page (50 by default).

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: ListCategoryPropertiesHistoryValues
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/at'
        - $ref: '#/components/parameters/group_property_history'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyHistoryValueList'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties History
      summary: Delete historical values of any Property of a Thing from a Category
      description: |
        Deletes historical Properties values of a Thing.

        > 📘 **Information:** To prevent accidental deletions, the operation
        > will fail if no filters are provided.

        > ⚠️ **Warning:** This operation can remove lots of information in one go and
        > without asking for confirmation, so make sure you know what you are doing!

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: DeleteCategoryPropertiesHistoryValues
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/at_delete'
        - $ref: '#/components/parameters/property-names'
      responses:
        204:
          description: Deleted
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}/things/{thing-id}/properties-history/{property}:
    post:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties History
      summary: Create historical values for Thing Property from a Category
      description: |
        Adds one or more historical values for the given Thing Property.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: CreateCategoryPropertyHistoryValues
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/property'
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/PropertyHistoryValue'
                - $ref: '#/components/schemas/PropertyHistoryValues'
            examples:
              single_timestamp:
                summary: Single timestamp
                value:
                  at: "2022-08-22T13:09:00Z"
                  properties:
                    memory: 69
              multi_timestamp:
                summary: Multiple timestamps
                value:
                  - at: "2022-08-22T13:10:00Z"
                    properties:
                      memory: 27
                  - at: "2022-08-22T13:09:00Z"
                    properties:
                      memory: 69
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyHistoryValues'
              example:
                - at: "2022-08-22T13:09:00Z"
                  properties:
                    memory: 69
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        409:
          $ref: '#/components/responses/PropertyValueAlreadyExists'
        500:
          $ref: '#/components/responses/ServerError'

    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties History
      summary: List historical values of a Thing Property from a Category
      description: |
        Returns the list of historical values of the given Thing Property.

        > 🚧 **Limitations:** A maximum of 1000 values will be returned
        > per page (50 by default).

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: ListCategoryPropertyHistoryValues
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/property'
        - $ref: '#/components/parameters/at'
        - $ref: '#/components/parameters/next_cursor'
        - $ref: '#/components/parameters/previous_cursor'
        - $ref: '#/components/parameters/limit'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PropertyHistoryValueList'
              example:
                paging:
                  next_cursor: ''
                  previous_cursor: ''
                data:
                  - at: "2022-08-22T13:10:00Z"
                    properties:
                      memory: 27
                  - at: "2022-08-22T13:09:00Z"
                    properties:
                      memory: 69
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Properties History
      summary: Delete historical values of a Thing Property from a Category
      description: |
        Deletes historical values of a Thing Property.

        > 📘 **Information:** To prevent accidental deletions, the operation
        > will fail if no filters are provided.

        > ⚠️ **Warning:** This operation can remove lots of information in one go and
        > without asking for confirmation, so make sure you know what you are doing!

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: DeleteCategoryPropertyHistoryValues
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
        - $ref: '#/components/parameters/property'
        - $ref: '#/components/parameters/at_delete'
      responses:
        204:
          description: Deleted
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/query/cursor:
    post:
#      x-pagination:
#        next:
#          reuse-previous-request: true
#          url: "https://api.swx.altairone.com/spaces/dsanchez/query/cursor/{$response.body#/id}"
#          result: "result"
#          has_more: "$response.body#/hasMore"
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ query ]
        - OAuth2AuthorizationCode: [ query ]
      description: |
        This endpoint allows to perform custom read-only queries directly on AnythingDB.
        AnythingDB relies on [**ArangoDB**](https://www.arangodb.com/), so this endpoint
        allows to set a custom AQL query that will run in a sandboxed ArangoDB database
        where the AnythingDB's Space information is stored.

        > 📘 **Information:** This endpoint is compatible with the
        > [`/_api/cursor`](https://www.arangodb.com/docs/stable/http/aql-query-cursor-accessing-cursors.html#create-cursor)
        > in the ArangoDB REST API.

        **A JSON object with these properties is required:**

          - **query**: contains the query string to be executed. **Note: Only read-only queries are allowed.**
          - **count**: indicates whether the number of documents in the result set should be returned in
           the "count" attribute of the result.
           Calculating the "count" attribute might have a performance impact for some queries
           in the future so this option is turned off by default, and "count"
           is only returned when requested.
          - **batchSize**: maximum number of result documents to be transferred from
           the server to the client in one roundtrip. If this attribute is
           not set, a server-controlled default value will be used. A *batchSize* value of
           *0* is disallowed. **Note: the server will set a maximum value.**
          - **ttl**: The time-to-live for the cursor (in seconds). If the result set is small enough
           (less than or equal to `batchSize`) then results are returned right away.
           Otherwise they are stored in memory and will be accessible via the cursor with
           respect to the `ttl`. The cursor will be removed on the server automatically
           after the specified amount of time. This is useful to ensure garbage collection
           of cursors that are not fully fetched by clients. If not set, a server-defined
           value will be used (default: 30 seconds). **Note: the server will set a maximum value.**
          - **cache**: flag to determine whether the AQL query results cache
           shall be used. **Note: This value is fixed to *false*.**
          - **memoryLimit**: the maximum number of memory (measured in bytes) that the query is allowed to
           use. If set, then the query will fail with error "resource limit exceeded" in
           case it allocates too much memory. A value of *0* indicates that there is no
           memory limit. **Note: the server will set a maximum value.**
          - **bindVars** (object): key/value pairs representing the bind parameters.
          - **options**: key/value object with extra options for the query.
           **Note: options will be ignored.**
          - **then**: key/value object with actions to apply on the returned query.


        The query details include the query string plus optional query options and
        bind parameters. These values need to be passed in a JSON representation in
        the body of the POST request.


        **HTTP 201**
        *A json document with these Properties is returned:*

        is returned if the result set can be created by the server.

        - **error**: A flag to indicate that an error occurred (*false* in this case)
        - **code**: the HTTP status code
        - **result** (anonymous json object): an array of result documents (might be empty if query has no results)
        - **hasMore**: A boolean indicator whether there are more results
        available for the cursor on the server
        - **count**: the total number of result documents available (only
        available if the query was executed with the *count* attribute set)
        - **id**: id of temporary cursor created on the server (optional, see above)
        - **extra**: an optional JSON object with extra information about the query result
        contained in its *stats* sub-attribute. For data-modification queries, the
        *extra.stats* sub-attribute will contain the number of modified documents and
        the number of documents that could not be modified
        due to an error (if *ignoreErrors* query option is specified)
        - **cached**: a boolean flag indicating whether the query result was served
        from the query cache or not. If the query result is served from the query
        cache, the *extra* return attribute will not contain any *stats* sub-attribute
        and no *profile* sub-attribute.


        **HTTP 400**
        *A json document with these Properties is returned:*

        is returned if the JSON representation is malformed or the query specification is
        missing from the request.
        If the JSON representation is malformed or the query specification is
        missing from the request, the server will respond with *HTTP 400*.
        The body of the response will contain a JSON object with additional error
        details, that will be available in the `details` attribute of an standard
        Altair® IoT Studio™ API error response.
        The error object has the following attributes:

        - **error**: boolean flag to indicate that an error occurred (*true* in this case)
        - **code**: the HTTP status code
        - **errorNum**: the server error number
        - **errorMessage**: a descriptive error message<br>
        If the query specification is complete, the server will process the query. If an
        error occurs during query processing, the server will respond with *HTTP 400*.
        Again, the body of the response will contain details about the error.

      summary: Create cursor
      tags:
        - Query Cursors
      operationId: createQueryCursor
      parameters:
        - $ref: '#/components/parameters/space'
      requestBody:
        description: Create a new read-only query cursor
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAPICursor'
            examples:
              requestQueryRange:
                $ref: '#/components/examples/requestQueryRange'
              requestQueryThenUpdateProperty:
                $ref: '#/components/examples/requestQueryThenUpdateProperty'
      responses:
        201:
          description: |
            is returned if the result set can be created by the server.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAPICursorResponse'
              examples:
                responseQueryRange:
                  $ref: '#/components/examples/responseQueryRange'
                responseQueryThenUpdateProperty:
                  $ref: '#/components/examples/responseQueryThenUpdateProperty'
        400:
          description: |
            is returned if the JSON representation is malformed or the query specification is
            missing from the request.

            If the JSON representation is malformed or the query specification is
            missing from the request, the server will respond with *HTTP 400*.

            The body of the response will contain a JSON object with additional error
            details. The object has the following attributes:

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  status: 400
                  message: "AQL: syntax error"
                  details:
                    code: 400
                    error: true
                    errorMessage: "AQL: syntax error"
                    errorNum: 1501
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          description: |
            The server will respond with *HTTP 404* in case a non-existing collection is
            accessed in the query.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  status: 404
                  message: "AQL: collection or view not found: foo (while parsing)"
                  details:
                    code: 404
                    error: true
                    errorMessage: "AQL: collection or view not found: foo (while parsing)"
                    errorNum: 1203
        405:
          description: |
            The server will respond with *HTTP 405* if an unsupported HTTP method is used.
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/query/cursor/{cursor-id}:
    post:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ query ]
        - OAuth2AuthorizationCode: [ query ]
      description: |
        If the cursor is still alive, returns an object with the following
        attributes:

        - *id*: the *cursor-identifier*
        - *result*: a list of documents for the current batch
        - *hasMore*: *false* if this was the last batch
        - *count*: if present the total number of elements

        Note that even if *hasMore* returns *true*, the next call might
        still return no documents. If, however, *hasMore* is *false*, then
        the cursor is exhausted.  Once the *hasMore* attribute has a value of
        *false*, the client can stop.

        > 📘 **Information:** This endpoint is compatible with the
        > [`/_api/cursor/{cursor-identifier}`](https://www.arangodb.com/docs/stable/http/aql-query-cursor-accessing-cursors.html#read-next-batch-from-cursor)
        > in the ArangoDB REST API.

      summary: Read next batch from cursor
      tags:
        - Query Cursors
      operationId: modifyQueryCursorPost
      parameters:
        - $ref: '#/components/parameters/space'
        - description: The name of the cursor
          in: path
          name: cursor-id
          required: true
          schema:
            type: string
            example: 1234567
      requestBody:
        description: Apply an operation on returned data
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ThenQueryRequest'
            examples:
              noPayload:
                summary: No payload
                value: {}
              requestQueryNextBatchThenUpdateProperty:
                $ref: '#/components/examples/requestQueryNextBatchThenUpdateProperty'
      responses:
        200:
          description: |
            The server will respond with *HTTP 200* in case of success.

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostAPICursorResponse'
              examples:
                responseQueryRange2:
                  $ref: '#/components/examples/responseQueryRange2'
                responseQueryRange3:
                  $ref: '#/components/examples/responseQueryRange3'
        400:
          description: |
            If the cursor identifier is omitted, the server will respond with *HTTP 404*.
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/Forbidden'
        404:
          description: |
            If no cursor with the specified identifier can be found, the server will respond
            with *HTTP 404*.
        405:
          description: |
            The server will respond with *HTTP 405* if an unsupported HTTP method is used.
        500:
          $ref: '#/components/responses/ServerError'

  /spaces/{space}/categories/{category-name}/mqtt-credentials:
    post:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ category ]
        - OAuth2AuthorizationCode: [ category ]
      tags:
        - Categories MQTT-credentials
      summary: Create MQTT credentials for a Category
      description: |
        Creates new MQTT credentials for the given Category.
      operationId: CreateCategoriesMQTTCredentials
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MQTTCategoryForm'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MQTTCategoryDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ category ]
        - OAuth2AuthorizationCode: [ category ]
      tags:
        - Categories MQTT-credentials
      summary: Get MQTT credentials of a Category
      description: |
        Returns the MQTT credentials of the given Category.
      operationId: GetCategoriesMQTTCredentials
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MQTTCategoryDocument'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    put:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ category ]
        - OAuth2AuthorizationCode: [ category ]
      tags:
        - Categories MQTT-credentials
      summary: Update MQTT credentials of a Category
      description: |
        Updates the existing MQTT credentials of the given Category.

        > 📘 **Information:** Sending an empty request will generate new
        > credentials with a random password.
      operationId: UpdateCategoriesMQTTCredentials
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MQTTCategoryForm'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MQTTCategoryDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ category ]
        - OAuth2AuthorizationCode: [ category ]
      tags:
        - Categories MQTT-credentials
      summary: Delete MQTT credentials of a Category
      description: |
        Deletes the existing MQTT credentials of the given Category.
      operationId: DeleteCategoriesMQTTCredentials
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
      responses:
        '204':
          description: The resource was deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /spaces/{space}/things/{thing-id}/mqtt-credentials:
    post:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Things MQTT-credentials
      summary: Create MQTT credentials for a Thing
      description: |
        Creates new MQTT credentials for the given Thing.
      operationId: CreateThingMQTTCredentials
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MQTTThingForm'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MQTTCategoryDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Things MQTT-credentials
      summary: Get MQTT credentials of a Thing
      description: |
        Returns the MQTT credentials of the given Thing.
      operationId: GetThingMQTTCredentials
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MQTTThingDocument'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    put:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Things MQTT-credentials
      summary: Update MQTT credentials of a Thing
      description: |
        Updates the existing MQTT credentials of the given Thing.

        > 📘 **Information:** Sending an empty request will generate new
        > credentials with a random password.
      operationId: UpdateThingMQTTCredentials
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MQTTCategoryForm'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MQTTThingDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Things MQTT-credentials
      summary: Delete MQTT Things credentials
      description: |
        Deletes the existing MQTT credentials of the given Thing.
      operationId: DeleteThingMQTTCredentials
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/thing-id'
      responses:
        '204':
          description: The resource was deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /spaces/{space}/categories/{category-name}/things/{thing-id}/mqtt-credentials:
    post:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Things MQTT-credentials
      summary: Create MQTT credentials for a Thing from a Category
      description: |
        Creates new MQTT credentials for the given Thing.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: CreateThingMQTTCredentialsByCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MQTTCategoryForm'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MQTTCategoryDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    get:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Things MQTT-credentials
      summary: Get MQTT credentials of a Thing from a Category
      description: |
        Returns the MQTT credentials of the given Thing.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: GetThingMQTTCredentialsByCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MQTTThingDocument'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    put:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Things MQTT-credentials
      summary: Update MQTT credentials of a Thing from a Category
      description: |
        Updates the existing MQTT credentials of the given Thing.

        > 📘 **Information:** Sending an empty request will generate new
        > credentials with a random password.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: UpdateThingMQTTCredentialsByCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MQTTCategoryForm'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MQTTThingDocument'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    delete:
      security:
        - AccessToken: []
        - OAuth2ClientCredentials: [ thing ]
        - OAuth2AuthorizationCode: [ thing ]
      tags:
        - Things MQTT-credentials
      summary: Delete MQTT Categories Things credentials
      description: |
        Deletes the existing MQTT credentials of the given Thing.

        > 🚧 **Limitations:** This operation will only work in the scope of the
        > given Category.
      operationId: DeleteThingMQTTCredentialsByCategory
      parameters:
        - $ref: '#/components/parameters/space'
        - $ref: '#/components/parameters/category-name'
        - $ref: '#/components/parameters/thing-id'
      responses:
        '204':
          description: The resource was deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'


components:
  x-pagination:
    CursorPagination:
      next:
        reuse-previous-request: true
        modifiers:
          - param: "$request.query.next_cursor"
            value: "$response.body#/paging/next_cursor"
        result: "data"
        has_more: "$response.body#/paging/next_cursor"

  securitySchemes:
    AccessToken:
      type: http
      scheme: bearer
      bearerFormat: Opaque JWT
      description: "Authenticate using an access token already granted."
    OAuth2ClientCredentials:
      type: oauth2
      description: "Authenticate using the credentials of an OAuth2 Client."
      flows:
        clientCredentials:
          tokenUrl: https://api.swx.altairone.com/oauth2/token
          refreshUrl: https://api.swx.altairone.com/oauth2/token
          scopes:
            offline: Offline scope
            category: Category scope
            model: Model scope
            thing: Thing scope
            query: Query scope
    OAuth2AuthorizationCode:
      type: oauth2
      description: "Authenticate going to the login page."
      flows:
        authorizationCode:
          authorizationUrl: https://api.swx.altairone.com/oauth2/auth
          tokenUrl: https://api.swx.altairone.com/oauth2/token
          refreshUrl: https://api.swx.altairone.com/oauth2/token
          scopes:
            category: Category scope
            model: Model scope
            thing: Thing scope
            query: Query scope

  parameters:
    space:
      in: path
      name: space
      required: true
      schema:
        type: string
        example: altair

    category-name:
      in: path
      name: category-name
      required: true
      schema:
        type: string
        example: ElectronicBoards

    thing-id:
      in: path
      name: thing-id
      required: true
      schema:
        type: string
        format: ulid
        example: 01FPSXTMN4CEGX09HF5RQ4RMY6

    action-name:
      in: path
      name: action-name
      required: true
      schema:
        type: string
        example: delay

    action-id:
      in: path
      name: action-id
      required: true
      schema:
        type: string
        format: ulid
        example: 01EDCAQE78A7CP6REXV5J8BAKR

    event-name:
      in: path
      name: event-name
      required: true
      schema:
        type: string
        example: highCPU

    event-id:
      in: path
      name: event-id
      required: true
      schema:
        type: string
        format: ulid
        example: 01EDCEZDTJX50SQTCJST5EW5NX

    property:
      in: path
      name: property
      required: true
      schema:
        type: string
        example: memory

    model-name:
      in: path
      name: model-name
      required: true
      schema:
        type: string
        example: RaspberryPiModel

    version-num:
      in: path
      name: version-num
      required: true
      schema:
        type: integer
        example: 2

    title:
      in: query
      name: title
      schema:
        type: string
      description: Filter by title.
      example: MainThing

    "type":
      in: query
      name: "@type"
      schema:
        type: string
      description: Filter by `@type`.
      example: cluster

    model:
      in: query
      name: model
      schema:
        type: string
      description: Filter by Model name.
      example: RaspberryPiModel

    version:
      in: query
      name: version
      schema:
        type: integer
      description: Filter by Version number. `model` query parameter must be also present.
      example: 1

    thing-ids:
      in: query
      name: "thingID[]"
      schema:
        type: array
        items:
          type: string
      description: Filter by multiple Thing IDs.
      examples:
        oneId:
          summary: Example of a single thingID
          value: [ "01EDVJEMFD24360JT7434A6GS8" ] # ?thingID[]=01EDVJEMFD24360JT7434A6GS8
        multipleIds:
          summary: Example of multiple thingID
          value: [ "01EDVJEMFD24360JT7434A6GS8", "01F53PMHJGCPSZX95QFJJEADS4" ] # ?thingID[]=01EDVJEMFD24360JT7434A6GS8&thingID[]=01F53PMHJGCPSZX95QFJJEADS4

    category:
      in: query
      name: "category[]"
      schema:
        type: array
        items:
          type: string
      description: Filter by multiple Category names.
      examples:
        oneId:
          summary: Example of a single Category
          value: [ "ElectronicBoards" ] # ?category[]=ElectronicBoards
        multipleIds:
          summary: Example of multiple Categories
          value: [ "ElectronicBoards", "ElectronicComponents" ] # ?category[]=ElectronicBoards&category[]=ElectronicComponents

    update-history:
      in: query
      name: update_history
      schema:
        type: boolean
      description: Indicates whether the values should be stored in the Properties history.
      example: true

    in_category:
      in: query
      name: "in_category"
      schema:
        type: boolean
        default: true
      description:
        If `true`, only Things within some Category will be listed.
        If `false`, only Things not associated to any Category will be listed.
        If omitted, all Things will be listed.
      example: false

    next_cursor:
      in: query
      name: "next_cursor"
      schema:
        type: string
      description: Cursor used to get the next page of results.
      example: WyIwMUY1M1BNSEpHQ1BTWlg5NVFGSkpFQURTNCJd

    previous_cursor:
      in: query
      name: "previous_cursor"
      schema:
        type: string
      description: Cursor used to get the previous page of results.
      example: WyIwMUY1M1BNSEpHQ1BTWlg5NVFGSkpFQURTNCJd

    limit:
      in: query
      name: "limit"
      schema:
        type: integer
        minimum: 1
        maximum: 1000
        default: 50
      description: The numbers of items to return.
      example: 50

    sort_things:
      in: query
      name: "sort"
      schema:
        type: array
        items:
          type: string
      explode: false
      style: form
      description: |
        Sort items by one or more fields in any order.

        For example, using `sort=uid,+title,-created` will return the results
        ordered by ascending `uid`, ascending `title` and descending `created`
        (having `uid` the highest priority and `created` the lowest).
      examples:
        oneId:
          summary: Example of a single sort field
          value: [ "+title" ]   # ?sort=+title
        multipleIds:
          summary: Example of multiple sort fields
          value: [ "+title", "-uid" ]   # ?sort=+title,-uid

    properties: # see https://github.com/OAI/OpenAPI-Specification/issues/1706
      in: query
      name: property
      schema:
        type: object
      explode: true
      example: '?property:temp=gt:20&property:dim=80'
      description: |
        This parameter adds a condition on the value of a Thing Property.
        Only the Things that meet this criteria will satisfy this filter.

        **Example:** given the query parameters `?property:temp=gt:20&property:dim=80`,
        a Thing will only match it if it has a `temp` Property with a value
        greater than 20 and a `dim` Property with a value equal to 80.

        The format of this query parameter is:

            property:<property_name>=<operator>:<value>

        Multiple parameters following the previous format can be used in the
        same request to set multiple conditions. Note that a Thing must meet all
        the given conditions to match.

        Supported value operators:
          * `eq`  → Equal (`==`). This is the default operator.
          * `neq` → Not equal (`!=`)
          * `gt`  → Greater than (`>`)
          * `gte` → Greater than or equal to (`>=`)
          * `lt`  → Less than (`<`)
          * `lte` → Less than or equal to (`<=`)

        Supported functions:
          * `contains` → Check whether the value is contained in the Property
            value (the Property must be an array, string or object).

            **Notes**:
              * The string matching performed is case-sensitive.
              * If the Property type is string, the `>`, `>=`, `<` and `<=`
                operators will compare the values alphabetically.
              * If the Property type is not an array, string or object, the
                Thing will not satisfy the condition.
              * If the Property type is an object, it will check whether an
                attribute with the given name is present in it.

    links-rel:
      in: query
      name: links.rel
      schema:
        type: string
      description: Filter by type of link relationship (`rel`).
      example: controlledBy

    links-href:
      in: query
      name: links.href
      schema:
        type: string
      description: Filter by link `href`.
      example: https://www.w3.org/TR/wot-thing-description/

    at:
      in: query
      name: "at"
      schema:
        type: string
      description: |
        This parameter can be used as a datetime or as a datetime range value.

        Using a date-time value:
         - This allows to get the Property value(s) that a Thing had with the
           date and time indicated. <br>Example: *2022-05-31T01:23:45Z*

           The result will include the last values of all the Thing Properties
           that have a timestamp equal to the `at` value.
           If there are Properties without that timestamp, the older dates closer to this one will be returned.

        Using a date-time range:
         - This allows to get the Property value(s) that a Thing had in a datetime
           range, using the `|` separator to specify start and end date-times.
           > **Example**: *2022-08-01T00:00:00Z|2022-09-01T00:00:00Z*

           Using short notation for years, months, and days is also allowed.
           > **Example**: *2022|2023* or *2022-12|2023-03* or *2023-05-15|2023-05-30*
      examples:
        at:
          value: '2022-05-31T01:23:45Z'
          summary: At
        from_to:
          value: '2022-08-01T00:00:00Z|2022-09-01T00:00:00Z'
          summary: From-To

    at_delete:
      in: query
      name: "at"
      schema:
        type: string
      required: true
      description: |
        This parameter can be used as a datetime or as a datetime range value.

        Using a date-time value:
         - This allows to delete the Property value(s) that a Thing had with the
           date and time indicated. <br>Example: *2022-05-31T01:23:45Z*

           This will delete the last values of all the Thing Properties
           that have a timestamp equal to the `at` value.
           If there are Properties without that timestamp, the older dates closer to this one will *NOT* be deleted.

        Using a date-time range:
         - This allows to delete the Property value(s) that a Thing had in a datetime
           range, using the `|` separator to specify start and end date-times.
           > **Example**: *2022-08-01T00:00:00Z|2022-09-01T00:00:00Z*

           Using short notation for years, months, and days is also allowed.
           > **Example**: *2022|2023* or *2022-12|2023-03* or *2023-05-15|2023-05-30*
      examples:
        at:
          value: '2022-05-31T01:23:45Z'
          summary: At
        from_to:
          value: '2022-08-01T00:00:00Z|2022-09-01T00:00:00Z'
          summary: From-To

    property-names:
      in: query
      name: "property_name[]"
      schema:
        type: array
        items:
          type: string
      description: Filter by multiple Property names.
      examples:
        oneId:
          summary: Example of a single Property Name
          value: [ "cpu" ] # ?property_name[]=cpu
        multiplePropertyNames:
          summary: Example of multiple Property Names
          value: [ "cpu", "temperature" ] # ?property_name[]=cpu&property_name[]=temperature

    group_property_history:
      in: query
      name: "group"
      schema:
        type: boolean
        default: false
      description: |
        This parameter controls the format of the returned values.
        - If `false` (default), one item will be returned for each history value.
        - If `true`, the history values will be returned grouped by their timestamp.
        This means that if two or more values have the same timestamp, they will
        be returned in a single item.

  schemas:
    AnyValue:
      description: "Can be any value - string, number, boolean, array or object."

    ErrorResponse:
      title: Error Response
      type: object
      properties:
        error:
          type: object
          required:
            - status
            - message
          properties:
            status:
              type: integer
              format: int64
              example: 400
            message:
              type: string
              example: invalid id
            details:
              type: object
              additionalProperties: {}
              description: Key/value object with extra information about the error.

    DataSchema:
      type: object
      properties:
        "@type":
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        description:
          type: string
        title:
          type: string
        readOnly:
          type: boolean
        oneOf:
          type: array
          items:
            $ref: '#/components/schemas/DataSchema'
        unit:
          type: string
        enum:
          type: array
          minItems: 1
          uniqueItems: true
          items: {}
        const: {}
        type:
          type: string
          enum:
            - boolean
            - integer
            - number
            - string
            - object
            - array
            - 'null'
        items:
          oneOf:
            - $ref: '#/components/schemas/DataSchema'
            - type: array
              items:
                $ref: '#/components/schemas/DataSchema'
        maxItems:
          type: integer
          minimum: 0
        minItems:
          type: integer
          minimum: 0
        minimum:
          type: number
        maximum:
          type: number
        properties:
          additionalProperties:
            $ref: '#/components/schemas/DataSchema'
        required:
          type: array
          items:
            type: string
      additionalProperties: false

    InteractionAffordance:
      type: object
      properties:
        '@type':
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        title:
          type: string
        description:
          type: string
    #        forms:
    #          type: array
    #          items:
    #            type: Form

    PropertyAffordance:
      allOf:
        - $ref: '#/components/schemas/InteractionAffordance'
        - type: object
          properties:
            observable:
              type: boolean

    ActionAffordance:
      allOf:
        - $ref: '#/components/schemas/InteractionAffordance'
        - type: object
          properties:
            input:
              allOf:
                - $ref: '#/components/schemas/DataSchema'
            output:
              allOf:
                - $ref: '#/components/schemas/DataSchema'
            safe:
              type: boolean
            idempotent:
              type: boolean

    EventAffordance:
      allOf:
        - $ref: '#/components/schemas/InteractionAffordance'
        - type: object
          properties:
            subscription:
              allOf:
                - $ref: '#/components/schemas/DataSchema'
            data:
              allOf:
                - $ref: '#/components/schemas/DataSchema'
            cancellation:
              allOf:
                - $ref: '#/components/schemas/DataSchema'

    Link:
      title: Link
      type: object
      description: A Link definition as defined by the [WoT specification](https://www.w3.org/TR/wot-thing-description/#link).
      properties:
        href:
          type: string
          format: iri
          example: 'https://help.altair.com/altair-iot-studio/index.htm'
          description: Target IRI of a link or submission target of a form.
        rel:
          type: string
          example: 'documentation'
          description: A link relation type identifies the semantics of a link.

    CategoryBase:
      title: Category Base
      type: object
      properties:
        name:
          type: string
          pattern: '^[a-zA-Z0-9_:-]{1,26}$'
          description: Name of the Category that will be used as a unique identifier.
          example: ElectronicBoards
        description:
          type: string
          description: The description of the Category.
          example: My category
        model:
          description: |
            The Model or Model and Version that all the Things in the Category
            must match in order to belong to it.
          allOf:
            - $ref: '#/components/schemas/ModelDescriptionCategory'
          default: null
#        validators:
#          type: object
#          x-omitempty: true
#          description: |
#            Validations that the Things must match to be able to belong to the
#            Category.
#          properties:
#            links:
#              type: array
#              items:
#                type: object
#                properties:
#                  href_pattern:
#                    type: string
#                    description: |
#                      The pattern of the Link Href. It can use wildcards like `#` or `+`.
#                    example: /spaces/myspace/categories/cpus/things/+
#                  rel_pattern:
#                    type: string
#                    description: |
#                      The pattern of the Link relation name. It can use wildcards like `#` or `+`
#                    example: '*'
#                  multiple:
#                    type: boolean
#                    description: |
#                      Whether more than one Link of a Thing can match the validator.
#                    example: false
#                  optional:
#                    type: boolean
#                    description: |
#                      Whether the validator must be matched by at least one Link of a Thing
#                    example: false

    CategoryCreate:
      title: Category Creation Request
      required:
        - name
      allOf:
        - $ref: '#/components/schemas/CategoryBase'

    CategoryUpdate:
      title: Category Update Request
      required:
        - name
      allOf:
        - $ref: '#/components/schemas/CategoryBase'

    Category:
      title: Category
      type: object
      allOf:
        - $ref: '#/components/schemas/CategoryBase'
        - type: object
          properties:
            created:
              type: string
              format: date-time
              example: "2021-11-17T03:15:40Z"
            modified:
              type: string
              format: date-time
              example: "2021-11-17T03:15:40Z"

    CategoryList:
      title: Category List
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ''
            previous_cursor:
              type: string
              example: ''
      example:
        paging:
          next_cursor: ''
          previous_cursor: ''
        data:
          - name: ElectronicBoards
            description: My category
            model:
              name: RaspberryPiModel
              version: 1
            created: "2021-11-17T03:15:40Z"
            modified: "2021-11-17T03:15:40Z"
          - name: ElectronicComponents
            description: My electronic components category
            model: null
            created: "2021-11-19T11:19:09Z"
            modified: "2021-11-21T20:33:51Z"

    ModelBase:
      title: Model Base
      type: object
      required:
        - name
      properties:
        name:
          type: string
          pattern: '^[a-zA-Z0-9_:-]{1,26}$'
          example: RaspberryPiModel
          description: Name of the Model that will be used as a unique identifier.
        description:
          type: string
          description: Description of the Model.
          example: My Raspberry Pi Model

    ModelCreate:
      title: Model Creation Request
      required:
        - name
      allOf:
        - $ref: '#/components/schemas/ModelBase'

    ModelUpdate:
      title: Model Update Request
      required:
        - name
      allOf:
        - $ref: '#/components/schemas/ModelBase'

    Model:
      title: Model
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: 01FPT3MJBRBMA5462PEE57FRKB
        - $ref: '#/components/schemas/ModelBase'
        - type: object
          properties:
            created:
              type: string
              format: date-time
              example: "2021-11-17T10:08:31Z"
            modified:
              type: string
              format: date-time
              example: "2021-11-17T10:08:31Z"

    ModelList:
      title: Model List
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Model'
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ''
            previous_cursor:
              type: string
              example: ''
      example:
        paging:
          next_cursor: ''
          previous_cursor: ''
        data:
          - name: RaspberryPiModel
            description: My Raspberry Pi Model
            created: "2021-11-17T10:08:31Z"
            modified: "2021-11-17T10:08:31Z"
          - name: ArduinoModel
            description: My Arduino Model
            created: "2021-11-21T14:31:22Z"
            modified: "2021-11-23T08:05:17Z"

    ModelVersionBase:
      title: Model-Version Base
      type: object
      properties:
        title:
          type: string
          description: Name of the Model-Version.
          example: "Version 1"
        description:
          type: string
          description: Description of the Model-Version.
          example: "Version 1 of RaspberryPiModel"
        template:
          description: |
            Describes the information of a Thing associated to the Model-Version.

            If a Model-Version is applied to a Thing, all defined `template`
            fields that are defined (i.e. those with non-null values) will
            replace these same fields in the Thing description.
          properties:
            title:
              type: string
              description: Name of the Thing.
              example: Altair® IoT Studio™ Device
            description:
              type: string
              description: Description of the Thing.
              example: My connected Altair® IoT Studio™ device
            properties:
              type: object
              description: Property definitions of the Thing.
              additionalProperties: {}
              example:
                cpu:
                  title: "CPU %"
                  description: "Device CPU usage in percent"
                  type: "number"
                  unit: "percent"
                  readOnly: false
            actions:
              type: object
              description: Action definitions of the Thing.
              additionalProperties: {}
              example:
                delay:
                  title: "Delay"
                  description: "Change sending frequency"
                  input:
                    properties:
                      input:
                        maximum: 100
                        minimum: 3
                        type: "number"
            events:
              type: object
              description: Event definitions of the Thing.
              additionalProperties: {}
              example:
                highCPU:
                  title: "High CPU"
                  description: "The CPU usage is over 50%"
                  data:
                    type: "number"
                    unit: "percent"
            links:
              type: array
              description: Links of the Thing.
              items:
                type: object
                additionalProperties: {}
                example:
                  href: "www.altair.com"
                  rel: "Company"

    ModelVersionCreate:
      title: Model-Version Creation Request
      allOf:
        - $ref: '#/components/schemas/ModelVersionBase'

    ModelVersion:
      title: Model-Version
      allOf:
        - type: object
          properties:
            version:
              type: integer
              example: 1
        - $ref: '#/components/schemas/ModelVersionBase'
        - type: object
          properties:
            created:
              type: string
              format: date-time
              example: "2021-11-23T21:11:37Z"

    ModelVersionList:
      title: Model-Version List
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ModelVersion'
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ''
            previous_cursor:
              type: string
              example: ''

    ModelDescription:
      title: Model Description for Things
      type: object
      description: |
        Model name and Version number applied to a Thing.
        Can be null (or omitted) if no Model is associated or it must be
        inferred from the Categories the Thing belongs to.
      properties:
        name:
          type: string
          description: Model name.
          example: RaspberryPiModel
        version:
          type: integer
          description: Version number.
          example: 1

    ModelDescriptionCategory:
      title: Model Description for Categories
      type: object
      nullable: true
      description: |
        Model name and Version number applied to a Category.
        Can be null (or omitted) if no Model is associated to the Category.
        If not null, Version number can be omitted to only apply the Model to
        the Things in the Category.
      required:
        - name
      properties:
        name:
          type: string
          description: Model name.
          example: RaspberryPiModel
        version:
          type: integer
          description: Version number.
          example: 1

    ThingBase:
      title: Thing Base
      type: object
      properties:
        title:
          type: string
          description: Name of the Thing.
          example: Altair® IoT Studio™ Device
        description:
          type: string
          description: Description of the Thing.
          example: My connected Altair® IoT Studio™ device
        '@type':
          description: |
            JSON-LD keyword to label the object with semantic tags (or types).
          oneOf:
            - type: string
            - type: array
              items:
                type: string
          example: ["Light", "OnOffSwitch"]
        '@context':
          description: |
            JSON-LD keyword to define short-hand names called terms that are
            used throughout a TD document.
          type: string
          example: context
        model:
          description: Model and Version applied to the Thing.
          allOf:
            - $ref: '#/components/schemas/ModelDescription'
        status:
          type: object
          allOf:
            - $ref: '#/components/schemas/PropertyValues'
        properties:
          type: object
          description: Property descriptions of the Thing.
          additionalProperties:
            $ref: '#/components/schemas/PropertyAffordance'
          example:
            cpu:
              title: "CPU %"
              description: "Device CPU usage in percent"
              type: "number"
              unit: "percent"
              readOnly: false
            disk:
              title: "Disk %"
              description: "Device Disk usage in percent"
              type: "number"
              unit: "percent"
              readOnly: false
            memory:
              title: "Memory %"
              description: "Device Memory usage in percent"
              type: "number"
              unit: "percent"
              readOnly: false
        actions:
          type: object
          description: Action descriptions of the Thing.
          additionalProperties:
            $ref: '#/components/schemas/ActionAffordance'
          example:
            delay:
              title: "Delay"
              description: "Change sending frequency"
              input:
                properties:
                  input:
                    maximum: 100
                    minimum: 3
                    type: "number"
            reboot:
              title: "Reboot"
              description: "Reboot device"
        events:
          type: object
          description: Event descriptions of the Thing.
          additionalProperties:
            $ref: '#/components/schemas/EventAffordance'
          example:
            highCPU:
              title: "High CPU"
              description: "The CPU usage is over 50%"
              data:
                type: "number"
                unit: "percent"
        links:
          type: array
          description: |
            Provides Web links to arbitrary resources that relate to the Thing.
            Any link to other Thing in the same space will create a graph
            relationship between the two Things.
          items:
            $ref: '#/components/schemas/Link'
          example:
            - href: 'https://help.altair.com/altair-iot-studio/index.htm'
              rel: 'documentation'
            - href: 'https://api.swx.altairone.com/spaces/space01/things/01FPSXTMN4CEGX09HF5RQ4RMY6'
              rel: 'parent'

    ThingCreate:
      title: Thing Creation Request
      allOf:
        - type: object
          properties:
            categories:
              type: array
              description: List of Category names the Thing belongs to.
              items:
                type: string
              example: [ 'category1', 'category2' ]
        - $ref: '#/components/schemas/ThingBase'

    ThingCategoryCreate:
      title: Thing Creation Request in a Category
      allOf:
        - $ref: '#/components/schemas/ThingBase'

    ThingUpdate:
      title: Thing Update Request
      allOf:
        - type: object
          properties:
            uid:
              type: string
              example: 01FPSXTMN4CEGX09HF5RQ4RMY6
            id:
              type: string
              example: 'https://api.swx.altairone.com/spaces/space01/things/01FPSXTMN4CEGX09HF5RQ4RMY6'
        - type: object
          properties:
            categories:
              type: array
              description: List of Category names the Thing belongs to.
              items:
                type: string
              example: [ 'category1', 'category2' ]
        - $ref: '#/components/schemas/ThingBase'

    ThingCategoryUpdate:
      title: Thing Update Request in a Category
      allOf:
        - type: object
          properties:
            uid:
              type: string
              example: 01FPSXTMN4CEGX09HF5RQ4RMY6
            id:
              type: string
              example: 'https://api.swx.altairone.com/spaces/space01/categories/category1/things/01FPSXTMN4CEGX09HF5RQ4RMY6'
        - $ref: '#/components/schemas/ThingBase'

    Thing:
      title: Thing
      allOf:
        - type: object
          properties:
            uid:
              type: string
              example: 01FPSXTMN4CEGX09HF5RQ4RMY6
            id:
              type: string
              example: 'https://api.swx.altairone.com/spaces/space01/things/01FPSXTMN4CEGX09HF5RQ4RMY6'
            categories:
              type: array
              description: List of Category names the Thing belongs to.
              items:
                type: string
              example: [ 'category1', 'category2' ]
            client_id:
              type: string
              description: |
                The ID of the OAuth2 client of this Thing. This field will not
                be included in the response if the client has not been setup.
              example: "space01::01FPSXTMN4CEGX09HF5RQ4RMY6"
        - $ref: '#/components/schemas/ThingBase'
        - type: object
          properties:
            created:
              type: string
              format: date-time
              example: "2021-12-13T09:38:11Z"
            modified:
              type: string
              format: date-time
              example: "2021-12-13T09:38:11Z"

    ThingCategory:
      title: Thing from a Category
      allOf:
        - type: object
          properties:
            uid:
              type: string
              example: 01FPSXTMN4CEGX09HF5RQ4RMY6
            id:
              type: string
              example: 'https://api.swx.altairone.com/spaces/space01/categories/category1/things/01FPSXTMN4CEGX09HF5RQ4RMY6'
            client_id:
              type: string
              description: |
                The ID of the OAuth2 client of this Thing. This field will not
                be included in the response if the client has not been setup.
              example: "space01::01FPSXTMN4CEGX09HF5RQ4RMY6"
        - $ref: '#/components/schemas/ThingBase'
        - type: object
          properties:
            created:
              type: string
              format: date-time
              example: "2021-12-13T09:38:11Z"
            modified:
              type: string
              format: date-time
              example: "2021-12-13T09:38:11Z"

    ThingList:
      title: Thing List
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Thing'
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ''
            previous_cursor:
              type: string
              example: ''

    ThingCategoryList:
      title: Thing List from a Category
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ThingCategory'
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ''
            previous_cursor:
              type: string
              example: ''

    ThingsDeleted:
      title: Things Deleted
      description: List of IDs of the deleted Things.
      type: array
      items:
        type: string
      example: ["01GM38SSQC0X32YQSXZYFJPGGC", "01GM38T332KMGEXJZNB6VYTRBM"]

    ThingOAuth2Credentials:
      title: Thing OAuth2 Credentials
      properties:
        client_id:
          type: string
          description: The Client ID of the Thing's OAuth2 client.
          example: "altair::01GJCPZPVCZKD9GDV4A51NT27H"
        client_secret:
          type: string
          description: The Client secret of the Thing's OAuth2 client.
          example: "MSivCvI71kHEAo0tXY6edIhTsQl12n"

    ActionValue:
      type: object
      properties:
        input:
          $ref: '#/components/schemas/AnyValue'
        status:
          type: string
        timeRequested:
          type: string
          format: date-time
        timeCompleted:
          type: string
          format: date-time
        href:
          type: string
      example:
        delay: 5

    ActionCreateRequest:
      type: object
      additionalProperties:
        properties:
          input:
            $ref: '#/components/schemas/AnyValue'
      example:
        delay:
          input:
            delay: 5

    ActionResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/ActionValue'
      example:
        delay:
          input:
            delay: 5
          status: pending
          timeRequested: "2022-06-02 15:37:46+0000"
          href: /spaces/altair/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR

    ActionListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ActionResponse'
          example:
            - delay:
                input:
                  delay: 5
                status: pending
                timeRequested: "2022-06-02 15:37:46+0000"
                href: /spaces/altair/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCAQE78A7CP6REXV5J8BAKR
            - delay:
                input:
                  delay: 7
                status: pending
                timeRequested: "2022-06-02 15:39:54+0000"
                href: /spaces/altair/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCB9FMD0Q3QR0YV4TWY4S3E
            - reboot:
                status: pending
                timeRequested: "2022-06-02 15:56:12+0000"
                href: /spaces/altair/things/01FPSXTMN4CEGX09HF5RQ4RMY6/actions/delay/01EDCCZYATJW1Z3D4T4BA4S2QH
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ''
            previous_cursor:
              type: string
              example: ''

    ActionUpdateRequest:
      type: object
      additionalProperties:
        properties:
          output:
            $ref: '#/components/schemas/AnyValue'
          status:
            type: string
      example:
        delay:
          status: "completed"

    EventValue:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/AnyValue'
        href:
          type: string
        timestamp:
          type: string
          format: date-time
      example:
        delay: 5

    EventCreateRequest:
      type: object
      additionalProperties:
        properties:
          data:
            $ref: '#/components/schemas/AnyValue'
      example:
        highCPU:
          data: 61

    EventResponse:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/EventValue'
      example:
        highCPU:
          data: 61
          timestamp: "2020-04-02 15:22:37+0000"
          href: /spaces/altair/things/01FPSXTMN4CEGX09HF5RQ4RMY6/events/highCPU/01EDCEZDTJX50SQTCJST5EW5NX

    EventListResponse:
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/EventResponse'
          example:
            - highCPU:
                data: 61
                timestamp: "2020-04-02 15:22:37+0000"
                href: /spaces/altair/things/01FPSXTMN4CEGX09HF5RQ4RMY6/events/highCPU/01EDCEZDTJX50SQTCJST5EW5NX
            - highCPU:
                data: 85
                timestamp: "2020-04-02 15:26:42+0000"
                href: /spaces/altair/things/01FPSXTMN4CEGX09HF5RQ4RMY6/events/highCPU/01EDCGYKV4YQ1CY3QHHSX8J843
            - lowDiskSpace:
                data: 95
                timestamp: "2020-04-03 07:12:55+0000"
                href: /spaces/altair/things/01FPSXTMN4CEGX09HF5RQ4RMY6/events/lowDiskSpace/01GPX7BR5X3YT5Y65ZMT24YT1N
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ''
            previous_cursor:
              type: string
              example: ''

    Properties:
      type: object
      additionalProperties: {}
      example:
        cpu: 22
        disk: 18
        memory: 67

    Property:
      type: object
      additionalProperties: {}
      example:
        memory: 67

    PropertyValues:
      type: object
      description: Map of property names/values.
      additionalProperties: {}
      example:
        cpu: 22.1
        disk: 18.7
        memory: 67

    PropertyHistoryValue:
      title: Property History Value
      description: Represents one or more Property values along with the date and time they were recorded.
      type: object
      required:
        - at
        - properties
      properties:
        at:
          type: string
          format: date-time
          description: Date and time the values were recorded.
          example: "2022-08-22T13:10:00Z"
        properties:
          $ref: '#/components/schemas/PropertyValues'
      example:
        at: "2022-08-22T13:10:00Z"
        properties:
          cpu: 43
          memory: 27
          disk: 19

    PropertyHistoryValues:
      title: Property History Values
      description: List of historical Property values.
      type: array
      items:
        $ref: '#/components/schemas/PropertyHistoryValue'
      example:
        - at: "2022-08-22T13:10:00Z"
          properties:
            cpu: 43
            memory: 27
            disk: 19
        - at: "2022-08-22T13:09:00Z"
          properties:
            cpu: 87
            memory: 69
        - at: "2022-08-22T13:08:30Z"
          properties:
            disk: 17

    PropertyHistoryValueList:
      title: Property History Value List
      description: Paginated list of historical Property values.
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/PropertyHistoryValue'
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ''
            previous_cursor:
              type: string
              example: ''
      example:
        paging:
          next_cursor: ''
          previous_cursor: ''
        data:
          - at: "2022-08-22T13:10:00Z"
            properties:
              cpu: 43
              memory: 27
              disk: 19
          - at: "2022-08-22T13:09:00Z"
            properties:
              cpu: 87
              memory: 69
          - at: "2022-08-22T13:08:30Z"
            properties:
              disk: 17

    PostAPICursor:
      title: Query Payload
      type: object
      required:
        - query
      properties:
        query:
          description: |
            Contains the query string to be executed
          type: string
        count:
          description: |
            Indicates whether the number of documents in the result set should be returned in
            the "count" attribute of the result.
            Calculating the "count" attribute might have a performance impact for some queries
            in the future so this option is turned off by default, and "count"
            is only returned when requested.
          format: ''
          type: boolean
        batchSize:
          description: |
            Maximum number of result documents to be transferred from
            the server to the client in one roundtrip. If this attribute is
            not set, a server-controlled default value will be used. A *batchSize* value of
            *0* is disallowed.
          format: int64
          type: integer
        ttl:
          description: |
            The time-to-live for the cursor (in seconds). If the result set is small enough
            (less than or equal to `batchSize`) then results are returned right away.
            Otherwise they are stored in memory and will be accessible via the cursor with
            respect to the `ttl`. The cursor will be removed on the server automatically
            after the specified amount of time. This is useful to ensure garbage collection
            of cursors that are not fully fetched by clients. If not set, a server-defined
            value will be used (default: 30 seconds).
          format: int64
          type: integer
        cache:
          description: |
            Flag to determine whether the AQL query results cache
            shall be used. If set to *false*, then any query cache lookup will be skipped
            for the query. If set to *true*, it will lead to the query cache being checked
            for the query if the query cache mode is either *on* or *demand*.
          format: ''
          type: boolean
        memoryLimit:
          description: |
            The maximum number of memory (measured in bytes) that the query is allowed to
            use. If set, then the query will fail with error "resource limit exceeded" in
            case it allocates too much memory. A value of *0* indicates that there is no
            memory limit.
          format: int64
          type: integer
        bindVars:
          description: |
            Key/value pairs representing the bind parameters.
          items:
            additionalProperties: {}
            type: object
          type: array
        options:
          description: This attribute is currently ignored.
          type: object
        then:
          $ref: '#/components/schemas/ThenOperation'
      example:
        query: "FOR i IN RANGE(@min,@max) RETURN i"
        count: true
        batchSize: 2
        bindVars:
          min: 0
          max: 5
        then:
          op: "update"
          resource: "properties"
          data:
            temp: 30.0

    ThenQueryRequest:
      type: object
      properties:
        then:
          $ref: '#/components/schemas/ThenOperation'

    ThenOperation:
      title: Operation to be applied on the resources returned by a query.
      type: object
      description: |
        Operation to be performed with the data returned in the query.
      properties:
        op:
          description: |
            Operation type on the resources of the query results. Supported operations:
              - `update`: Update the resources.
              - `delete`: Delete the resources.
          type: string
          example: update
        resource:
          description: |
            Type of resource the operation will be applied to. Supported resources:
              - `things`: The Thing description of the Things with the returned IDs.
              - `properties`: The Properties of the Things with the returned IDs.
          type: string
          example: properties
        data:
          description: The data used to modify the resources. # TODO: Add more information.
          # TODO: Add type.
          example:
            update_firmware: true

    PostAPICursorResponse:
      title: Query Response
      type: object
      required:
        - error
      properties:
        error:
          description: |
            A flag to indicate that an error occurred.

          format: ''
          type: boolean
        code:
          description: |
            The HTTP status code of the response from ArangoDB.

          type: integer
        result:
          description: |
            An array of result documents (might be empty if query has no results).

          items: {}
          type: array
        hasMore:
          description: |
            A boolean indicating whether there are more results
            available for the cursor on the server.

          format: ''
          type: boolean
        count:
          description: |
            The total number of result documents available (only
            available if the query was executed with the *count* attribute set).

          format: int64
          type: integer
        id:
          description: |
            ID of temporary cursor created on the server (optional, see above).

          type: string
        extra:
          additionalProperties: {}
          description: |
            An optional JSON object with extra information about the query result
            contained in its *stats* sub-attribute. For data-modification queries, the
            *extra.stats* sub-attribute will contain the number of modified documents and
            the number of documents that could not be modified
            due to an error (if *ignoreErrors* query option is specified).

          type: object
        cached:
          description: |
            A boolean flag indicating whether the query result was served
            from the query cache or not. If the query result is served from the query
            cache, the *extra* return attribute will not contain any *stats* sub-attribute
            and no *profile* sub-attribute.

          format: ''
          type: boolean
        then:
          description: |
            Includes information about the operation performed on the query results
            (only applicable if `then` was used in the request).
          type: object
          properties:
            success_count:
              description: The number of results that were successfully modified.
              type: boolean
            error_count:
              description: The number of results that could not be modified.
              type: boolean
      example:
        result:
          - 0
          - 1
        hasMore: true
        id: '1234567'
        count: 6
        extra:
          stats:
            executionTime: 0.00011064599675592035
        error: false
        code: 201

    ID:
      type: string
      format: ulid
      example: 01FPJGR4TWXHH23EHEKT4HEN6F

    MQTTForm:
      properties:
        enabled:
          type: boolean
          example: true
        username:
          type: string
          example: myusername
        password:
          type: string
          example: MyPa$$word123
        description:
          type: string
          example: MyCredential

    MQTTThingForm:
      allOf:
        - $ref: '#/components/schemas/MQTTForm'

    MQTTCategoryForm:
      allOf:
        - $ref: '#/components/schemas/MQTTForm'
      properties:
        collection_name:
          type: string
          example: MyCollection

    MQTTThingDocumentACL:
      properties:
        acl:
          type: object
          properties:
            publish:
              type: array
              items:
                type: object
                properties:
                  pattern:
                    type: string
                    example: altair/collections/my_collection/things/01FWDZKSRZFGDACF4N7E3VSBBZ/data
            subscribe:
              type: array
              items:
                type: object
                properties:
                  pattern:
                    type: string
                    example: altair/collections/my_collection/things/01FWDZKSRZFGDACF4N7E3VSBBZ/data

    MQTTThingsDocument:
      properties:
        id:
          $ref: '#/components/schemas/ID'
        created:
          type: string
          example: 2022-02-08T14:41:49.270946386+01:00,
      allOf:
        - $ref: '#/components/schemas/MQTTThingForm'

    MQTTCategoryDocument:
      properties:
        id:
          $ref: '#/components/schemas/ID'
        created:
          type: string
          example: 2022-02-08T14:41:49.270946386+01:00,
      allOf:
        - $ref: '#/components/schemas/MQTTCategoryForm'

    MQTTThingDocument:
      properties:
        id:
          $ref: '#/components/schemas/ID'
        created:
          type: string
          example: 2022-02-08T14:41:49.270946386+01:00,
        topics:
          $ref: '#/components/schemas/MQTTThingDocumentACL'
      allOf:
        - $ref: '#/components/schemas/MQTTThingForm'

    MQTTThingsDocumentList:
      properties:
        data:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/MQTTThingDocument'
        paging:
          type: object
          properties:
            next_cursor:
              type: string
              example: ''
            previous_cursor:
              type: string
              example: ''

  responses:
    BadRequest:
      description: Bad Request (payload format error or invalid field values)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              status: 400
              message: malformed body

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            error1:
              summary: Unauthenticated (token expired or invalid)
              value:
                error:
                  status: 401
                  message: Unauthenticated
            error2:
              summary: No token provided
              value:
                error:
                  status: 401
                  message: No token provided

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              status: 403
              message: Unauthorized

    Conflict:
      description: Already Exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              status: 400
              message: This item already exists

    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              status: 404
              message: Item not found

    PropertyValueAlreadyExists:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              status: 409
              message: The property already has a value with the same timestamp

    ServerError:
      description: Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            error:
              status: 500
              message: Something went wrong

  examples:
    requestQueryRange:
      summary: Simple query
      value:
        query: "FOR i IN RANGE(@min,@max) RETURN i"
        count: true
        batchSize: 3
        bindVars:
          min: 0
          max: 7

    responseQueryRange:
      summary: Simple query response
      value:
        result:
          - 0
          - 1
          - 2
        hasMore: true
        id: '3298550880725'
        count: 8
        extra:
          stats:
            executionTime: 0.00015875999815762043
        error: false
        code: 201

    responseQueryRange2:
      summary: Simple query response (second batch)
      value:
        result:
          - 3
          - 4
          - 5
        hasMore: true
        id: '3298550880725'
        count: 8
        extra:
          stats:
            executionTime: 0.00015875999815762043
        error: false
        code: 201

    responseQueryRange3:
      summary: Simple query response (third/last batch)
      value:
        result:
          - 6
          - 7
        hasMore: false
        count: 8
        extra:
          stats:
            executionTime: 0.00015875999815762043
        error: false
        code: 201

    requestQueryThenUpdateProperty:
      summary: Update Thing properties using custom query
      value:
        query: "FOR t IN things FILTER HAS(t.properties, @property_name) RETURN t._key"
        count: true
        batchSize: 100
        bindVars:
          property_name: "update_firmware"
        then:
          op: update
          resource: properties
          data:
            update_firmware: true

    responseQueryThenUpdateProperty:
      summary: Response after updating Thing properties
      value:
        result:
          - "01H02E53RF67NBPF2AT6J6JCB6"
          - "01H02E5QHJ6PN7NM09AG3J53BK"
          - "01H02E5QHMREQ249EKQ9AAMXFJ"
          - "01H02E5QHMREQ249EKQBNWT5K9"
          - "01H02E5QQBGYSVCQ014GDV0JQG"
        hasMore: false
        count: 5
        extra:
          stats:
            executionTime: 0.002683209953829646
        error: false
        code: 201
        then:
          success_count: 5
          error_count: 0

    requestQueryNextBatchThenUpdateProperty:
      summary: Update Thing properties using custom query
      value:
        then:
          op: update
          resource: properties
          data:
            update_firmware: true
